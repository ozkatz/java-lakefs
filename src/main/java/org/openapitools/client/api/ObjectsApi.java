/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.InlineResponse2009;
import org.openapitools.client.model.ObjectStats;
import org.openapitools.client.model.UnderlyingObjectProperties;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectsApi {
    private ApiClient localVarApiClient;

    public ObjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteObject
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> object deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectCall(String repository, String branch, String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository}/branches/{branch}/objects"
            .replaceAll("\\{" + "repository" + "\\}", localVarApiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "branch" + "\\}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basic_auth", "jwt_token" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectValidateBeforeCall(String repository, String branch, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteObject(Async)");
        }
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling deleteObject(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteObject(Async)");
        }
        

        okhttp3.Call localVarCall = deleteObjectCall(repository, branch, path, _callback);
        return localVarCall;

    }

    /**
     * delete object
     * 
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> object deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteObject(String repository, String branch, String path) throws ApiException {
        deleteObjectWithHttpInfo(repository, branch, path);
    }

    /**
     * delete object
     * 
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> object deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteObjectWithHttpInfo(String repository, String branch, String path) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(repository, branch, path, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete object (asynchronously)
     * 
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> object deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectAsync(String repository, String branch, String path, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(repository, branch, path, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObject
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object content </td><td>  * ETag -  <br>  * Content-Disposition -  <br>  * Last-Modified -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object expired </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectCall(String repository, String ref, String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository}/refs/{ref}/objects"
            .replaceAll("\\{" + "repository" + "\\}", localVarApiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "ref" + "\\}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basic_auth", "jwt_token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectValidateBeforeCall(String repository, String ref, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getObject(Async)");
        }
        
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling getObject(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getObject(Async)");
        }
        

        okhttp3.Call localVarCall = getObjectCall(repository, ref, path, _callback);
        return localVarCall;

    }

    /**
     * get object content
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object content </td><td>  * ETag -  <br>  * Content-Disposition -  <br>  * Last-Modified -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object expired </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public File getObject(String repository, String ref, String path) throws ApiException {
        ApiResponse<File> localVarResp = getObjectWithHttpInfo(repository, ref, path);
        return localVarResp.getData();
    }

    /**
     * get object content
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object content </td><td>  * ETag -  <br>  * Content-Disposition -  <br>  * Last-Modified -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object expired </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getObjectWithHttpInfo(String repository, String ref, String path) throws ApiException {
        okhttp3.Call localVarCall = getObjectValidateBeforeCall(repository, ref, path, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get object content (asynchronously)
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object content </td><td>  * ETag -  <br>  * Content-Disposition -  <br>  * Last-Modified -  <br>  * Content-Length -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object expired </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectAsync(String repository, String ref, String path, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectValidateBeforeCall(repository, ref, path, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUnderlyingProperties
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata on underlying storage </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnderlyingPropertiesCall(String repository, String ref, String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository}/refs/{ref}/objects/underlyingProperties/"
            .replaceAll("\\{" + "repository" + "\\}", localVarApiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "ref" + "\\}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basic_auth", "jwt_token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnderlyingPropertiesValidateBeforeCall(String repository, String ref, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getUnderlyingProperties(Async)");
        }
        
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling getUnderlyingProperties(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getUnderlyingProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getUnderlyingPropertiesCall(repository, ref, path, _callback);
        return localVarCall;

    }

    /**
     * get object properties on underlying storage
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @return UnderlyingObjectProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata on underlying storage </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public UnderlyingObjectProperties getUnderlyingProperties(String repository, String ref, String path) throws ApiException {
        ApiResponse<UnderlyingObjectProperties> localVarResp = getUnderlyingPropertiesWithHttpInfo(repository, ref, path);
        return localVarResp.getData();
    }

    /**
     * get object properties on underlying storage
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @return ApiResponse&lt;UnderlyingObjectProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata on underlying storage </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnderlyingObjectProperties> getUnderlyingPropertiesWithHttpInfo(String repository, String ref, String path) throws ApiException {
        okhttp3.Call localVarCall = getUnderlyingPropertiesValidateBeforeCall(repository, ref, path, null);
        Type localVarReturnType = new TypeToken<UnderlyingObjectProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get object properties on underlying storage (asynchronously)
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata on underlying storage </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnderlyingPropertiesAsync(String repository, String ref, String path, final ApiCallback<UnderlyingObjectProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnderlyingPropertiesValidateBeforeCall(repository, ref, path, _callback);
        Type localVarReturnType = new TypeToken<UnderlyingObjectProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjects
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param prefix  (optional)
     * @param after  (optional)
     * @param amount  (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> entry list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> prefix or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectsCall(String repository, String ref, String prefix, String after, Integer amount, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository}/refs/{ref}/objects/ls"
            .replaceAll("\\{" + "repository" + "\\}", localVarApiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "ref" + "\\}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basic_auth", "jwt_token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectsValidateBeforeCall(String repository, String ref, String prefix, String after, Integer amount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling listObjects(Async)");
        }
        
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling listObjects(Async)");
        }
        

        okhttp3.Call localVarCall = listObjectsCall(repository, ref, prefix, after, amount, _callback);
        return localVarCall;

    }

    /**
     * list objects under a given prefix
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param prefix  (optional)
     * @param after  (optional)
     * @param amount  (optional, default to 100)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> entry list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> prefix or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2009 listObjects(String repository, String ref, String prefix, String after, Integer amount) throws ApiException {
        ApiResponse<InlineResponse2009> localVarResp = listObjectsWithHttpInfo(repository, ref, prefix, after, amount);
        return localVarResp.getData();
    }

    /**
     * list objects under a given prefix
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param prefix  (optional)
     * @param after  (optional)
     * @param amount  (optional, default to 100)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> entry list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> prefix or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2009> listObjectsWithHttpInfo(String repository, String ref, String prefix, String after, Integer amount) throws ApiException {
        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(repository, ref, prefix, after, amount, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list objects under a given prefix (asynchronously)
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param prefix  (optional)
     * @param after  (optional)
     * @param amount  (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> entry list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> prefix or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectsAsync(String repository, String ref, String prefix, String after, Integer amount, final ApiCallback<InlineResponse2009> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(repository, ref, prefix, after, amount, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statObject
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object gone (but partial metadata may be available) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statObjectCall(String repository, String ref, String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository}/refs/{ref}/objects/stat"
            .replaceAll("\\{" + "repository" + "\\}", localVarApiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "ref" + "\\}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basic_auth", "jwt_token" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statObjectValidateBeforeCall(String repository, String ref, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling statObject(Async)");
        }
        
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling statObject(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling statObject(Async)");
        }
        

        okhttp3.Call localVarCall = statObjectCall(repository, ref, path, _callback);
        return localVarCall;

    }

    /**
     * get object metadata
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @return ObjectStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object gone (but partial metadata may be available) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectStats statObject(String repository, String ref, String path) throws ApiException {
        ApiResponse<ObjectStats> localVarResp = statObjectWithHttpInfo(repository, ref, path);
        return localVarResp.getData();
    }

    /**
     * get object metadata
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @return ApiResponse&lt;ObjectStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object gone (but partial metadata may be available) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectStats> statObjectWithHttpInfo(String repository, String ref, String path) throws ApiException {
        okhttp3.Call localVarCall = statObjectValidateBeforeCall(repository, ref, path, null);
        Type localVarReturnType = new TypeToken<ObjectStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get object metadata (asynchronously)
     * 
     * @param repository  (required)
     * @param ref a reference (could be either a branch or a commit ID) (required)
     * @param path  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> path or branch not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> object gone (but partial metadata may be available) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statObjectAsync(String repository, String ref, String path, final ApiCallback<ObjectStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = statObjectValidateBeforeCall(repository, ref, path, _callback);
        Type localVarReturnType = new TypeToken<ObjectStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadObject
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @param storageClass  (optional)
     * @param content Object content to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> repository or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadObjectCall(String repository, String branch, String path, String storageClass, File content, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repository}/branches/{branch}/objects"
            .replaceAll("\\{" + "repository" + "\\}", localVarApiClient.escapeString(repository.toString()))
            .replaceAll("\\{" + "branch" + "\\}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (storageClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storageClass", storageClass));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (content != null) {
            localVarFormParams.put("content", content);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basic_auth", "jwt_token" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadObjectValidateBeforeCall(String repository, String branch, String path, String storageClass, File content, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling uploadObject(Async)");
        }
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling uploadObject(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling uploadObject(Async)");
        }
        

        okhttp3.Call localVarCall = uploadObjectCall(repository, branch, path, storageClass, content, _callback);
        return localVarCall;

    }

    /**
     * upload object content
     * 
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @param storageClass  (optional)
     * @param content Object content to upload (optional)
     * @return ObjectStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> repository or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectStats uploadObject(String repository, String branch, String path, String storageClass, File content) throws ApiException {
        ApiResponse<ObjectStats> localVarResp = uploadObjectWithHttpInfo(repository, branch, path, storageClass, content);
        return localVarResp.getData();
    }

    /**
     * upload object content
     * 
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @param storageClass  (optional)
     * @param content Object content to upload (optional)
     * @return ApiResponse&lt;ObjectStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> repository or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectStats> uploadObjectWithHttpInfo(String repository, String branch, String path, String storageClass, File content) throws ApiException {
        okhttp3.Call localVarCall = uploadObjectValidateBeforeCall(repository, branch, path, storageClass, content, null);
        Type localVarReturnType = new TypeToken<ObjectStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * upload object content (asynchronously)
     * 
     * @param repository  (required)
     * @param branch  (required)
     * @param path  (required)
     * @param storageClass  (optional)
     * @param content Object content to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> object metadata </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> repository or branch not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> generic error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadObjectAsync(String repository, String branch, String path, String storageClass, File content, final ApiCallback<ObjectStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadObjectValidateBeforeCall(repository, branch, path, storageClass, content, _callback);
        Type localVarReturnType = new TypeToken<ObjectStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
