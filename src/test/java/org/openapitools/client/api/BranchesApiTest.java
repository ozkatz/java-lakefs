/*
 * lakeFS API
 * lakeFS HTTP API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BranchCreation;
import org.openapitools.client.model.ContinuousExportConfiguration;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.RevertCreation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BranchesApi
 */
@Ignore
public class BranchesApiTest {

    private final BranchesApi api = new BranchesApi();

    
    /**
     * create branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBranchTest() throws ApiException {
        String repository = null;
        BranchCreation branch = null;
        String response = api.createBranch(repository, branch);

        // TODO: test validations
    }
    
    /**
     * delete branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBranchTest() throws ApiException {
        String repository = null;
        String branch = null;
        api.deleteBranch(repository, branch);

        // TODO: test validations
    }
    
    /**
     * diff branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void diffBranchTest() throws ApiException {
        String repository = null;
        String branch = null;
        String after = null;
        Integer amount = null;
        InlineResponse2008 response = api.diffBranch(repository, branch, after, amount);

        // TODO: test validations
    }
    
    /**
     * get branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBranchTest() throws ApiException {
        String repository = null;
        String branch = null;
        String response = api.getBranch(repository, branch);

        // TODO: test validations
    }
    
    /**
     * returns the current continuous export configuration of a branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContinuousExportTest() throws ApiException {
        String repository = null;
        String branch = null;
        ContinuousExportConfiguration response = api.getContinuousExport(repository, branch);

        // TODO: test validations
    }
    
    /**
     * list branches
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBranchesTest() throws ApiException {
        String repository = null;
        String after = null;
        Integer amount = null;
        InlineResponse2006 response = api.listBranches(repository, after, amount);

        // TODO: test validations
    }
    
    /**
     * set continuous export state as repaired
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repairTest() throws ApiException {
        String repository = null;
        String branch = null;
        api.repair(repository, branch);

        // TODO: test validations
    }
    
    /**
     * revert branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revertBranchTest() throws ApiException {
        String repository = null;
        String branch = null;
        RevertCreation revert = null;
        api.revertBranch(repository, branch, revert);

        // TODO: test validations
    }
    
    /**
     * hook to be called in order to execute continuous export on branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runTest() throws ApiException {
        String repository = null;
        String branch = null;
        String response = api.run(repository, branch);

        // TODO: test validations
    }
    
    /**
     * sets a new continuous export configuration of a branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setContinuousExportTest() throws ApiException {
        String repository = null;
        String branch = null;
        ContinuousExportConfiguration config = null;
        api.setContinuousExport(repository, branch, config);

        // TODO: test validations
    }
    
}
